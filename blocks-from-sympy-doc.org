#+latex_header: \usepackage{listings}

* General

#+BEGIN_SRC python :session :results raw
from sympy import *
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results raw
x = symbols('x')
a = Integral(cos(x)*exp(x), x)
a.doit()
#+END_SRC

#+RESULTS:
exp(x)*sin(x)/2 + exp(x)*cos(x)/2


#+BEGIN_SRC python :session 
sqrt(3)
#+END_SRC

#+RESULTS:
: sqrt(3)

#+BEGIN_SRC python :session 
y = symbols('y')
expr = x + 2*y
expr-x
#+END_SRC

#+RESULTS:
: 2*y

#+BEGIN_SRC python :session 
expanded = expand(x*expr)
expanded
#+END_SRC

#+RESULTS:
: x**2 + 2*x*y

#+BEGIN_SRC python :session 
factor(expanded)
#+END_SRC

#+RESULTS:
: x*(x + 2*y)

#+name: derivative
#+BEGIN_SRC python :session 
diff(cos(x)*exp(x), x)
#+END_SRC

#+RESULTS: derivative
: -exp(x)*sin(x) + exp(x)*cos(x)

#+BEGIN_SRC python :session 
integrate(exp(x)*sin(x) + exp(x)*cos(x),x)
#+END_SRC

#+RESULTS:
: exp(x)*sin(x)

#+BEGIN_SRC python :session 
integrate(sin(x**2), (x, -oo, oo))
#+END_SRC

#+RESULTS:
: sqrt(2)*sqrt(pi)/2

#+BEGIN_SRC python :session 
limit(sin(x)/x, x, 0)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC python :session 
solve(x**2 - 2, x)
#+END_SRC

#+RESULTS:
| -sqrt | (2) | sqrt | (2) |

#+BEGIN_SRC python :session :results raw 
solve(x**2 - 2, x)
#+END_SRC

#+RESULTS:
[-sqrt(2), sqrt(2)]
[-sqrt(2), sqrt(2)]

#+BEGIN_SRC python :session 
y = Function(’y’)
t = symbols('t')
dsolve(Eq(y(t).diff(t, t) - y(t), exp(t)), y(t))
#+END_SRC

#+RESULTS:
: Eq(y(t), C2*exp(-t) + (C1 + t/2)*exp(t))

#+BEGIN_SRC python :session :results raw
Matrix([[1, 2], [2, 2]]).eigenvals()
#+END_SRC

#+RESULTS:
{-sqrt(17)/2 + 3/2: 1, 3/2 + sqrt(17)/2: 1}
{-sqrt(17)/2 + 3/2: 1, 3/2 + sqrt(17)/2: 1}

#+BEGIN_SRC python :session  
besselj(nu, z).rewrite(jn)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session  :results raw
latex(Integral(cos(x)**2, (x, 0, pi)))
#+END_SRC

#+RESULTS:
\int_{0}^{\pi} \cos^{2}{\left (x \right )}\, dx
\int_{0}^{\pi} \cos^{2}{\left (x \right )}\, dx

#+BEGIN_SRC python :session  
expr = x + 1
expr.subs(x, 2)
#+END_SRC

#+RESULTS:
: 3

* Matrices

#+BEGIN_SRC python :session :results raw
M = Matrix([[1, 3], [-2, 3]])
N = Matrix([[0, 3], [0, 7]])
M+N,M*N,M**2,M**-1,M.T
#+END_SRC

#+RESULTS:
(Matrix([
[ 1,  6],
[-2, 10]]), Matrix([
[0, 24],
[0, 15]]), Matrix([
[-5, 12],
[-8,  3]]), Matrix([
[1/3, -1/3],
[2/9,  1/9]]), Matrix([
[1, -2],
[3,  3]]))


#+begin_src python :session
p = M.charpoly(x)
factor(p)
#+end_src

#+RESULTS:
: x**2 - 4*x + 9

#+begin_src python :session
p.subs(x,0)
#+end_src

#+RESULTS:
: 9

* Permutations

=a*b= means =a= is applied first.

#+BEGIN_SRC python :session :results raw
from sympy.combinatorics import Permutation 
a = Permutation([0, 2, 1])
b = Permutation([1, 2, 0])
a,b,a*b
#+END_SRC

#+RESULTS:
(Permutation(1, 2), Permutation(0, 1, 2), Permutation(2)(0, 1))

* Groups

  see
  http://docs.sympy.org/latest/modules/combinatorics/named_groups.html

#+BEGIN_SRC python :session :results raw
from sympy.combinatorics.named_groups import SymmetricGroup

G=SymmetricGroup(3)
list(G.elements)
#+END_SRC

#+RESULTS:
[Permutation(2), Permutation(2)(0, 1), Permutation(0, 2, 1), Permutation(1, 2), Permutation(0, 1, 2), Permutation(0, 2)]
[Permutation(2)(0, 1), Permutation(2), Permutation(0, 2), Permutation(1, 2), Permutation(0, 2, 1), Permutation(0, 1, 2)]

#+BEGIN_SRC python :session 
def char_function(G, g, i, j):
    elems = list(G.elements)
    n = len(elems)
    if g*elems[i] == elems[j]:
        return 1
    else:
        return 0
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session 
def regular_representation(G):
    elems = list(G.elements)
    n = len(elems)
    def char_function(i, j):
        if elems[i]*g == elems[j]:
            return 1
        else:
            return 0
    mydict = {}
    for g in elems:
        mydict[g] = Matrix(n, n, char_function)
    return mydict
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results raw
from sympy.combinatorics.named_groups import DihedralGroup
#H=SymmetricGroup(3)
H=DihedralGroup(4)
rep=regular_representation(H)
len(H.elements)
#+END_SRC

#+RESULTS:
8
8
2
2
2



#+BEGIN_SRC python :session :results raw
for g in list(H.elements):
    for h in list(H.elements):
        if rep[g*h] != rep[g]*rep[h]:
            print(g,h,"Wrong!")
        else:
            print(g,h,"Correct!")

rep[list(H.elements)[0]]
#+END_SRC

#+RESULTS:
Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0]])
Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0]])
Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0]])
Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0]])
Matrix([[0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0]])
[Permutation(0, 1, 2, 3, 4), Permutation(4)(0, 1)]
[Permutation(0, 1, 2, 3), Permutation(3)(0, 1)]
[Permutation(0, 1, 2), Permutation(2)(0, 1)]
[1, 1]
[1]




# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
